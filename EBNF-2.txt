                           BruteForce language v2.00
                        by Michiel 'El Muerte' Hendriks
                           elmuerte@drunksnipers.com


PROGRAM               ::= DECLARATIONS STATEMENTS
DECLARATIONS          ::= ((DECLARATION|FUNCTION) SEMICOLON)*
DECLARATION           ::= (VAR TYPE IDENTIFIER)
TYPE                  ::= INTEGER
                        | STRING
                        | FLOAT
                        | BOOLEAN
IDENTIFIER            ::= __implicit__
FUNCTION              ::= FUNC TYPE IDENTIFIER LBRACK ARGUMENTS RBRACK DECLARATIONS BEGIN STATEMENTS END
ARGUMENTS             ::= (TYPE LVALUE SEMICOLON)*
STATEMENTS            ::= (STATEMENT SEMICOLON)*
STATEMENT             ::= ASSIGNMENT
                        | WHILEDO
                        | IFTHENELSE
ASSIGNMENT            ::= IDENTIFIER BECOMES EXPR
                        | FUNCTIONCALL
WHILEDO               ::= WHILE EXPR DO CODEBLOCK
CODEBLOCK             ::= STATEMENT
                        | (BEGIN STATEMENTS END)
IFTHENELSE            ::= IF EXPR THEN CODEBLOCK (ELSE CODEBLOCK)?
EXPR                  ::= BOOLEX
BOOLEX                ::= ACCUM ((LT|LE|GT|GE|EQ|NE) ACCUM)*
ACCUM                 ::= MULT ((PLUS|MINUS) MULT)*
MULT                  ::= PREOP ((MULTIPLY|DIVIDE) PREOP)*
PREOP                 ::= (MINUS|NOT)? OPERAND
OPERAND               ::= IDENTIFIER
                        | FUNCTIONCALL
                        | INTVALUE
                        | FLOATVALUE
                        | STRINGVALUE
                        | BOOLVALUE
                        | LBRACK EXPR RBRACK
FUNCTIONCALL          ::= IDENTIFIER LBRACK (EXPR (COMMA EXPR)*)? RBRACK
INTVALUE              ::= __implicit__
FLOATVALUE            ::= __implicit__
STRINGVALUE           ::= __implicit__
BOOLVALUE             ::= TRUE|FALSE


BEGIN                 ::= 'begin'
END                   ::= 'end'
SEMICOLON             ::= ';'
VAR                   ::= 'var'
INTEGER               ::= 'int'
STRING                ::= 'string'
FLOAT                 ::= 'float'
BOOLEAN               ::= 'bool'
FUNC                  ::= 'function'
UNDERSCORE            ::= '_'
BECOMES               ::= '='
WHILE                 ::= 'while'
DO                    ::= 'do'
IF                    ::= 'if'
THEN                  ::= 'then'
ELSE                  ::= 'else'
LT                    ::= '<'
LE                    ::= '<='
GT                    ::= '>'
GE                    ::= '>='
EQ                    ::= '=='
NE                    ::= '!='
PLUS                  ::= '+'
MINUS                 ::= '-'
MULTIPLY              ::= '*'
DIVIDE                ::= '/'
NOT                   ::= '!'
LBRACK                ::= '('
RBRACK                ::= ')'
TRUE                  ::= 'true'
FALSE                 ::= 'false'
COMMA                 ::= ','
